// This is a tutorial story that will show you almost all features of SKIM (the
// language used by the game). The game doesn't make many assumptions about how
// you structure a story and it's up to you to decide if want to use rooms, or
// have an inventory. This example story will use such a setup.

// Use the provided skim.vim highlight rules in your Vim or gVim. This will
// make writing correct text a lot easier as it will catch any unmatched quotes,
// or misplaced tokens. It will also make this file easy to read so set up your
// editor now! Put the skim.vim file in your Vim syntax folder and reopen this
// file.

//************************* crash course sample noun ***************************

// The story is comprised of nouns with verbs that get executed.
// Here is a sample noun not used in this story, it's solely to provide an
// overview of many features. We go over individual features later.

[sample noun = value1, value2, #4] // This creates a noun in the story
                                   // and immediately sets its text values
                                   // of which the noun may have many (or none)
                                   // and it's integer value which it has always
                                   // one and it's 0 by default.

?top level condition // This condition, if false, hides the verb below.

  [:sample verb] // This is a verb that may be executed by the story if the user
                 // selects it or you call it in the story yourself.
    "This text gets printed on the screen when the verb is executed."

    ?@sample noun -= value3 // This condition checks if value3 is NOT amongst
                            // the text values of sample noun.
    { // These braces set the scope of this condition.
      "If the condition is met, this text will be printed as well and the
      instructions below executed."

      !sample noun += value3 // add value3 do the noun
      !FunctionName(function argument) // this calls a function

    } { // This } { creates an "else" statement
        // will get executed if the condition above fails.

      !sample noun:sample verb 2 // This will execute the verb below.
    }

[:sample verb 2]

  "Some more text but **this in big title font**. This is a keyword
  that will be printed highlighted: <this will be printed[sample noun]>.
  Clicking on such a keyword will show a menu containing all the verbs
  unless they were hidden by failing their top level condition."

//******************************* user noun ************************************

// A noun is defined by placing a word in square brackets on its own line.
// You may assign initial values to the noun.
// [Noun Name = values to be assigned to the noun]
// Nouns must start with a letter and may contain letters, numbers and spaces.
// Names are case sensitive and must be unique.

[chapter 1] // This is a user noun.

 [:open] // This is a verb belonging to it, calling chapter 1:open will
         // execute this block. The block ends with the next verb or noun.

  "Text in \"quotes\" is printed to the screen.
  Indentation and break-lines are ignored.
  Text surrounded by \*\* will be"

  // These two paragraphs will be merged together adding \n between them.

  "printed in a **different font.** __Each style will be printed on a separate
  line__ from regular text. ==Styles **cannot** be nested.=="

  // ** for title font
  // __ for quote font
  // == for mono spaced font

  "\n\nYou can force new lines by using == \\n == in text. Let's start this
  story by entering the tutorial room by calling ==!tutorial room:go to==
  outside of quotes. The result will follow: "

  !tutorial room:go to // Anything past a ! is an instruction, this one will
                       // find noun [tutorial room] and execute the block under
                       // the verb [:go to].

  !Play(hello) // This will play the sound.

//***************************** reserved nouns *********************************

// These are the reserved nouns, treated differently by the game. Not all are
// needed. You only need to define QUEUE so the game knows how to start, others
// will work fine with their default values.

// These 3 nouns expect values of noun:verb.

[QUEUE = chapter 1:open] // This is what gets executed on this turn
                         // Here we tell the story to go to noun [chapter 1]
                         // and execute the verb [:open].

// Every time the player clicks something, the action gets put on the QUEUE
// and executed. Each item gets removed after execution.

[QUICK = self:visible nouns, self:inventory] // The values here get executed
                                             // every turn to produce the text
                                             // of the quick menu.

// The quick menu text gets replaced every turn. You can use the quick menu
// to show player status, inventory, list of available keywords.

[CALLS = reminder:tick] // Any value here will get executed every turn.

// CALLS get executed before the queue. This means you can have a look at the
// queue and even clear it, stopping the action from taking place.

// The 3 nouns below expect values that are nouns.

[PLACE] // This is where we are. You don't need to use it in your story.
        // Here we leave it empty because we start nowhere.

[EXITS = tutorial room] // This contains a list of a possible places we can go.

// It's not required by the game engine, and no logic is enforced. It's up to
// you to use it if you want to. Here we assign the first place we will go to.

[NOUNS] // These are the nouns that stay highlighted in the text left from the
        // previous move.

// The user can see old text in the main window from previous actions and can
// even scroll further back. Keywords in that text are not clickable, unless
// the nouns the reference are placed as values in NOUNS..

//******************************** assets **************************************

// Asset definition starts with $ and fits on a single line.
// Assets are like nouns and require unique names.

$room = BG(room.png) // This creates an asset of type BG (background).

$pen = Image(pen.png, -0.1, 0.5, 1.2) // Image at given position and zoom.

$hello = Sound(hello.wav) // One-off sound.

//****************************** quick menu ************************************

// We provide this because we want to have an inventory. We will store items
// as values of this noun.

[self]

// We provided the game with these two verbs by placing them in the reserved
// noun QUICK. They will get executed every turn to create the quick menu.

 [:inventory]

  "\nInventory:\n" // \n forces a newline in text.
  !Keyword(@self) // This will print all the values of noun self as keywords.

// Name(parameter) is a function call. Keyword(@self) will call the function
// Keyword and pass @self as the parameter for it.

// @noun evaluates to values of the noun, so @self will expand to all the values
// that are currently assigned to the noun self. @ can be nested.

 [:visible nouns]

  !Keyword(@PLACE) // Show the keyword for the location we are in
  "\nObjects:\n"
  !Keyword(@NOUNS) // and all the things that are there.

//************************ patterns ********************************************

// Patterns are defined per story and are used by prepending them to nouns.
// This way you can define the game to work like a regular IF with places and
// an inventory.

// Patterns are defined like nouns but use two [[ ]] sets of brackets.
// Any occurrence of the name of the pattern will be replaced with the name of
// the noun that will use this pattern.

[[room]]  // We will use this pattern for nouns that represent places.

// ?condition will determine if the execution continues into the block.
// Top level conditions are the ones placed above the verb definition.
// They need to succeed for the verb to be visible and accessible.

?@EXITS+=room & @PLACE-=room { // The & means both conditions need to be met.

// += means contains. ?@EXITS+=room will be true if the values on the left
// contain a value called room. @EXITS will expand to values of that noun.

 [:go to] // Verb, this is where the execution goes upon calling !room:go to.

  !EXITS= // This one clears exits.
  !PLACE=room // Change location to the room we're entering by setting the
              // value of the system noun to the name of the noun of the room
  !NOUNS=@room // Active nouns are listed in locations in this story so we
               // set the values of system noun to the values of the location.
  !:look // Look at the room we're in now.

} // Closing brace means the top level condition ends here.

?@PLACE+=room { // Rest of the actions are available when we are in the room.
  // The { is a cheat, if there is no closing } it's assumed to be at the end
  // of the definition rather then at the next top level condition so it affects
  // all the remaining verbs in the noun this pattern gets prepended to.


[[item]] // We will use this pattern for things that may be picked up.

?@@PLACE+=item { // Check if the item is the location we are in,
 [:take]
  !@PLACE-=item // remove it from the location,
  !NOUNS-=item // remove it from the active nouns,
  !self+=item // add it to the inventory.
  "Taken."
}

?@@PLACE+=item | @self+=item { // The rest of verbs is available if the item
                               // is either in the room or in our inventory.

//******************************* using a pattern ******************************

// This noun, pen, uses the pattern item. It will be prepended and the name of
// the pattern replaced with the name of the noun so this:

[pen]
[pen[item]]
 [:look]
  !Play(pen) // Show the image.
  "Black ink pen."

// becomes this:
// [pen]
//  ?@@PLACE+=pen {
//   [:take]
//    !@PLACE-=pen
//    !NOUNS-=pen
//    !self+=pen
//    "Taken."
//  ?@@PLACE+=pen | @self+=pen
//   [:look]
//    !Play(pen)
//    "Black ink pen."
//  }

//******************************************************************************

// This noun, pen, uses the pattern item. It will be prepended and the name of
// the pattern replaced with the name of the noun so this:
[crowbar]
[crowbar[item]]
 [:look]
  "A small iron <crowbar>." // Text in < > is a keyword.
                            // Keywords get highlighted and
                            // clicking on them show a menu that
                            // let's you pick a verb for the noun
                            // that matches the name.

//******************************************************************************

[tutorial room = pen, door, crowbar, tea]
[tutorial room[room]]

 [:look] // Because we appended the room definition this verb is only visible
         // when we're in the room.

  "You are sitting in the <tutorial room>. // These break-lines will be ignored
                                           // and the text will be re-flowed.
   This text was triggered by
   <looking[tutorial room:look]>." // Clicking on this keyword will not
                                   // produce a menu of verbs. Clicking it
                                   // will execute the verb [:look]
                                   // in the noun [tutorial room].

  "You are <writing a story[story]>." // The name in [ ] is the name of the
                                      // noun. The keyword in < > will be
                                      // visible, but the noun being reference
                                      // is the noun in square brackets [ ].

  ?+=pen { // Only show this text if pen is a value of this noun.
           // The noun name is implied to be the one being defined.
   "A <pen> is lying on the desk."
  }

  ?+=crowbar {
   "A <crowbar> is hanging on the wall."
  } {
    // The block after } { will be executed if the condition above fails.
   "A nail, where the <crowbar> used to be is sticking out of the wall."
  }

  !tea:look // This will execute the verb [:look] in [tea].
            // The text will get inlined with the rest of this description.

  "The room has only one <door>" // This sentence will finish differently
                                 // depending on the state of the door.
                                 // A space will be inserted if needed.

  ?@door+=open {
   "leading <outside>."
   !EXITS+=outside // If the door is open add outside as a possible exit.
  } {
   ", currently closed."
  }

  !Play(room) // This will activate the asset called room.

//******************************************************************************

[door]

?-=open
 [:open] [:use] // Only the first verb name is visible in the menu the player
                // can see, but both will work internally.
  ?-=locked {
   "You try the door but it's locked."
   !door+=locked
  } {
   "You already know it's locked."
  }

?@self+=crowbar & +=locked & -=open // All conditions need to be met.
                                    // You need a crowbar
                                    // and to know the door is locked
                                    // and it can't be already pried open.
 [:pry door]
  "Using the crowbar, you pry the lock off the door."
  !+=open
  !EXITS+=outside

// Remember that verbs reset implied scope of top level conditions.
// This means that the previous condition which didn't have a {
// will not affect the verb below.

 [:look]
  ?-=open {
   "It's a flimsy wooden door"
  } {
   "The damaged door swings freely. It leads <outside>."
  }

//******************************************************************************

[tea]

?-=empty {
 [:look]

  ?-=warm // No braces are used so the scope is implied to be until the next
          // condition or verb.
   "The <cup of tea[tea]> is getting cold."

  // The implied scope of ?-=warm ends here.

  ?+=warm
   "The fresh <cup of tea[tea]> is nice and warm."

 [:drink]
  ?-=warm
   "You drink the cold <tea>, it's not very nice."
   !+=empty

  ?+=warm
   "Ah, that hits the spot."
   !+=empty
}

?+=empty // If no braces are used this top level condition is only valid
         // for this verb.
 [:look]
  "The <tea cup[tea]> is empty."

 [:make fresh]
  "You make a fresh <cup[tea]>."
  !+=warm !-=empty

//******************************************************************************

// A number with a # in front is treated as an integer value and is not part
// of other text values of the noun. A noun has only one integer value.

[story = #0]

 [:look]

  "It's the tutorial story."

  ?<=#1 {
   "Still needs a lot of work."
   !<< // This aborts the execution of the parent block
       // so the next statement doesn't activate.
  }

  ?<=#3 {
   "It's getting there."
   !<<
  }

  "It's done."

 [:write]
  "You work for a few minutes."
  !tea-=warm
  !+=#1 // Add one to the integer value of the noun.

//******************************************************************************

[outside]
[outside[room]]
 [:look]
  "You are outside the <tutorial room>."
  !EXITS+=tutorial room
  !Stop(room) // This will hide the room image.

//******************************************************************************

[reminder = #5]

 [:tick] // This was placed in CALLS and will get called every turn.

  !-=#1 // Tick down to zero.

  ?<=#0 & @PLACE+=tutorial room // After 5 turns if we're in the room,
   !CALLS-=reminder:tick        // remove itself from the CALLS.
   !QUEUE+=reminder:show // This will queue up that verb to be executed after
                         // the user action (QUEUE is first come first served).
 [:show]
   "\nMaybe you should do some work."

//******************************************************************************

// For a full list of features of the language see the SKIM manual.

