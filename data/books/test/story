//***************** starting place, exits, inventory and tools *****************

[<QUEUE> = your room:go] // this is what gets executed when book is opened
[<PLACE>] // we start nowhere
[<EXITS> = your room] // assign default value so we can enter our starting room
[<NOUNS>] // these are the nouns that stay highlighted in old text
[<QUICK> = self:visible, self:list] // these get executed to print the quickmenu
[<CALLS>]

//******************** background setting **************************************

[$room=BG(room.png)] // this creates an asset of type BG (background)
[$pen=Image(pen.png, -0.1, 0.5, 1.2)]
[$musicroom=Music(musicroom.ogg)]
[$hello=Sound(hello.wav)]

[<your room media>]
  [:show]
    [!Play(room)]
    [!Play(musicroom)]
    [!Play(hello)]
    // [!calls+=your room media:autohide] // this gets evaluated each turn
  [:autohide] // and will hide the background if we leave
    [?@PLACE-=your room]
      [!calls-=your room media:autohide]
      [!Stop(room)]
      [!Stop(musicroom)]

//******************************************************************************

[<self>]
  [:look]
    You are tired.
  [:list]
    \nInventory:\n
    [!Keyword(@self)] // show keywords for items we have
  [:visible]
    [!Keyword(@PLACE)] // show the keyword for the location we are in
    \nObjects:\n
    [!Keyword(@NOUNS)] // and all the things that are there

// These patterns are defined per story.
// This way you can define the game to work like a regular IF with places and
// an inventory.
//************************ pattern for places  *********************************

[<[room]>] // pattern definition because noun after [< is blank
           // we will store items here

// top level conditions are the ones placed above the verb definition
[?@EXITS+=room] & [?@PLACE-=room] { // both conditions need to be met
  [:go] // verb, this is where the excutions goes upon calling [!room:go]
    // these instruction get executed when room:go gets called,
    [!EXITS=] // this one clears exits
    [!PLACE=room] // change location to the room we're entering
    [!NOUNS=@room] // active nouns are listed in locations in this story
    [!:look] // look at the room we're in now
}

[?@PLACE+=room] { // rest of the actions are available when we are in the room
  // this is a cheat, if there is no closing } it's assumed to be at the end
  // of the definition rather then at the next top level condition
  // rest gets appended here

//************************ pattern for items  **********************************

[<[item]>]

[?@@PLACE+=item] { // if the item is the location we are in
  [:take]
    [!@PLACE-=item]
    [!NOUNS-=item]
    [!self+=item]
    Taken.

//******************************************************************************

[<pen[item]>]
  [:look]
    [!Play(pen)]
    Black ink pen.

//******************************************************************************

[<your room[room]> = tea, pen, door] // noun definition for <your room>,
                               // uses the <room> definition as base

[:look] // because we appended the room definition these are only visible
        // when we're in the room
  You are sitting in your <room[your room]> <programming[program]>.
  A cup of <tea> is on the desk.
  [?+=pen] {
    A <pen> is lying on the desk.
  }
  The room has only one <door[door:open]>.
  [!your room media:show]

  [?@door=open] // if the door is open
    [!EXITS+=staircase] // add the staircase as a possible exit
    You can see the <staircase> through the open <door>.

//******************************************************************************

[<door>] // noun definition, this ends the last block and starts a new one

[?-=open] // if the door is not open
  [:open] [:use] // only the first one is visible, but both will work
    You open the door. You may now exit to the <staircase>.
    [!EXITS+=staircase]
    [!door=open]

[?+=open] // if the door is open (door is implied)
  [:close] [:use] // this time use will close it
    You close the door.
    [!door=] // close it by clearing the open value from the door noun

  [:leave]
    [!staircase:go]
      You leave the room and enter the <staircase>.

//******************************************************************************

[<tea>]

[?-=empty] {
  [:look]
    [?-=warm]
      The <cup of tea[tea]> is getting cold.
    [?+=warm]
      The fresh <cup of tea[tea]> is nice and warm.

  [:drink] [:use]
    [?-=warm]
      You drink the cold tea, it's not very nice.
      [!+=empty]
    [?+=warm]
      Ahh, that hits the spot.
      [!+=empty]
}

[?+=empty] {
  [:look at] [:use]
    The cup of tea is empty.
}

[:make fresh]
  You make a fresh <cup of tea[tea]>.
  [!+=warm] [!-=empty]

//******************************************************************************

[<program>]

[:look]
  [!your room media:show]
  You are writing an interactive fiction engine.
  [?<=#1] {
    It's a long way to go.
    [!<<] // this aborts the execution of the parent block
          // so the next statement doesn't activate
  }
  [?<=#3] {
    Still needs a lot of work.
  }

[:program] [:use]
  You work for a few minutes.
  [!tea-=warm]
  [!=#program+#1+(#1+#1)+Size(program)]

//******************************************************************************

[<staircase[room]>]

[:look]
  You are outside your <room[your room]>.
  [!EXITS+=your room]
